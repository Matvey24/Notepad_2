{"n": "Help-en", "t": 0, "f": [{"n": "1. Basic", "t": 1, "c": "FOLDER, TEXT, SCRIPT - types of entries\n\n\n\nFOLDER - contains other entries\n\nTEXT - text file, you can see beginning of the text under the name of the file.\nClick on it to edit it.\n\nSCRIPT - the same as text file, but click on it will execute script, which is written in file.\n\nfiles - TEXT or SCRIPT.\n\nTo create entry, click '\u2295', choose type and write name for the entry, or click 'paste', if some entry was cut before.\n\nDo long click on '\u2295' to quick start editing new text.\n\nClick button 'Settings' or do long click on entry to open editor dialog. There you can rename entry, change type between SCRIPT and TEXT, delete or cut.\n\nIf 'ask before delete' in menu is selected, app will ask you to accept. If not selected - the entry will be deleted immediately.\n\n'Help' dir - if '/Help' does not exist, creates it and shows. Else shows it.\n\nThe project on GitHub: https://github.com/Matvey24/Notepad_2"}, {"n": "2. Script", "t": 1, "c": "Script - python 3.8 script.\nWrite some code on python 3 in text, then change type of the text to Script and tap it.\n\n\nOutput.\nOutput of the script is going to 'out.txt' in the same folder, result of error stream is going to 'err.txt'.\n\n\nLibraries.\nNow there are no external libraries, just standard python 3 library.\n'json' and 'traceback' are already imported.\n\nSPACE.\nYou can call 'space' - dict from a script, the dict is one for all scripts. You can transfer data between scripts by it.\n\nAPI.\nNotepad api is imported as 'api', it has the following methods:\n\ntoast(str, len=False) - displays toast with text 'str'\n\ntouch(path) - if entry does not exist, makes new TEXT\n\nread(path):str - read text from file, if there are no file - raises exception.\n\nwrite(path, str) - write text to file, makes new text if need, throws exception if path is a path of folder.\n\nscript(path, mode=True) - marks text as script or script as text, makes new file if need, throws exception if path is a path of folder.\n\nmkdir(path) - makes new folder, throws runtime error if path is a path of file.\n\ndelete(path):bool - deletes entry and if entry is folder, deletes all children, returns True if anything was deleted.\n\npath():str - returns absolute path of visible folder.\n\nscript_path():str - returns absolute path of current script.\n\nscript_name():str - returns name of script file (relative path).\n\nget_name(path):str - returns name of entry, which is pointed by path.\n\nrename(path, new_name) - renames entry\n\npath_concat(str, str):str - returns right concatenation of two paths.\n\nexists(path):bool - returns True if path exists else False.\n\nis_folder(path):bool - returns True if path is path of folder, else False.\n\nis_script(path):bool - returns True, if path is path of script, else False.\n\nget_type(path):Type - returns example of the enum, can be None, Type.TEXT, Type.FOLDER, Type.SCRIPT.\n\nlist_files(path):java.util.ArrayList - returns list of files of the folder, list.size() to get length, list.get(i) to get i element. Elements are of type DatabaseElement, which have following fields:\nid:int - unique id in database.\nname:str,\ntype:Type,\ncontent:str - preview - first 64 characters of content.\n\nDatabaseElement has method toString():str.\n\nmove(path1, path2) - moves entry called path1, to folder called path2, does not allow to move folder into itself.\n\nrun(path) - starts executing the file in parallel thread.\n\ncd(path) - sets visible (by script) folder to path.\n\n\nto_py(path):dict - returns dict of following values:\n'n' - name of entry\n't' - (int) type\nif type is 0 - Type.FOLDER.ordinal():\n 'f' - list of dicts - entries\nelse:\n 'c' - content of file\n\nfrom_py(dict, path='.') - makes new entry from dict in folder called path.\n\nto_json(path):str - makes string from to_py(path)\n\nfrom_json(str, path='.') - invokes from_py(dict, path)\n\n\nPATH.\nabsolute path starts on root folder called '/' - like in title of window.\n\nrelative path is path, which starts on folder which contains current executable file.\n\n\nOTHER.\nYou can import every class from android standard library, if you need example of Context, it is available as 'api.activity' of type MainActivity extends androidx.appcompat.app.AppCompatActivity."}, {"n": "3. Code examples", "t": 0, "f": [{"n": "1. Hello world", "t": 0, "f": [{"n": "1. print", "t": 2, "c": "print('Hello world')"}, {"n": "2. toast", "t": 2, "c": "api.toast('Hello world')"}, {"n": "3. input", "t": 2, "c": "print(input())"}]}, {"n": "2. Read-write", "t": 0, "f": [{"n": "1. Simple", "t": 0, "f": [{"n": "1. Write", "t": 2, "c": "api.write('data/text', 'Hello world')"}, {"n": "2. Read", "t": 2, "c": "api.toast(api.read('data/text'))"}, {"n": "3. Delete", "t": 2, "c": "api.delete('data')"}]}, {"n": "2. Incrementor", "t": 0, "f": [{"n": ".num", "t": 1, "c": "0"}, {"n": "appender", "t": 2, "c": "#append one to file num\n\nfile = '.num'\n\ni = 1\nif api.exists(file):\n    s = api.read(file)\n    i = int(s) + 1\n\napi.write(file, str(i))"}, {"n": "subtractor", "t": 2, "c": "#subtract one from file num\n\nfile = '.num'\n\ni = -1\nif api.exists(file):\n    s = api.read(file)\n    i = int(s) - 1\n\napi.write(file, str(i))"}]}, {"n": "3. Stopwatch", "t": 0, "f": [{"n": "1. Toggle stopwatch", "t": 2, "c": "#counts seconds while you don't toggle\nimport time\nif 'watch' in space and not space['watch']:\n    space['watch'] = True\nelse:\n    space['watch'] = False\n    tm = time.time()\n    while not space['watch']:\n        api.write('time', str(round(time.time() - tm, 2)))\n        time.sleep(0.33)\n    \n    api.delete('time')"}, {"n": "2. Toggle timer", "t": 2, "c": "#Timer\nimport time\nif 'timer' in space and not space['timer']:\n    space['timer'] = True\nelse:\n    delay = float(api.read('3. Timer delay'))\n    space['timer'] = False\n    tm = time.time()\n    tmp = delay\n    while not space['timer'] and tmp > 0:\n        api.write('time', str(round(tmp, 2)))\n        time.sleep(0.33)\n        tmp = delay - (time.time() - tm)\n    if not space['timer']:\n        api.toast('Finished')\n    space['timer'] = True\n    api.delete('time')"}, {"n": "3. Timer delay", "t": 1, "c": "3"}]}]}, {"n": "3. Move", "t": 0, "f": [{"n": "1. Example", "t": 0, "f": [{"n": "1. Make data", "t": 2, "c": "api.mkdir('main')\napi.mkdir('fold')\napi.touch('file')"}, {"n": "2. Move file", "t": 2, "c": "api.move('file', 'fold')"}, {"n": "3. Move fold", "t": 2, "c": "api.move('fold', 'main')"}, {"n": "4. Move back", "t": 2, "c": "api.move('main/fold/file', '.')\napi.move('main/fold', '.')"}, {"n": "5. Clear data", "t": 2, "c": "api.delete('main')\napi.delete('fold')\napi.delete('file')"}]}, {"n": "2. Moving with replace", "t": 0, "f": [{"n": "1. make", "t": 2, "c": "api.write('dir/file', 'Hello')"}, {"n": "2. move", "t": 2, "c": "api.move('dir/file', '.')\napi.delete('dir')"}, {"n": "3. delete", "t": 2, "c": "api.delete('err.txt')\napi.delete('file')\napi.delete('dir')"}, {"n": "dir", "t": 0, "f": [{"n": "file", "t": 1, "c": "Hello"}]}, {"n": "err.txt", "t": 1, "c": "Traceback (most recent call last):\n  File \"/data/data/com.matvey.perelman.notepad2/files/chaquopy/AssetFinder/app/python_api.py\", line 43, in run_code\n    exec(code_object, glob)\n  File \"/Help-en/3. Code examples/3. Move/2. Moving with replace/2. move\", line 1, in <module>\n  File \"/data/data/com.matvey.perelman.notepad2/files/chaquopy/AssetFinder/app/python_api.py\", line 26, in wrapper\n    raise Exception(string)\nException: \u041d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u043c\u0435\u0441\u0442\u0438\u0442\u044c / \u043f\u0435\u0440\u0435\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u0442\u044c: \u0444\u0430\u0439\u043b './file' \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442.\n"}, {"n": "file", "t": 1, "c": "Hello"}]}, {"n": "3. Moving containing folder", "t": 0, "f": [{"n": "main", "t": 0, "f": [{"n": "script directory", "t": 0, "f": [{"n": "1. move to second", "t": 2, "c": "api.move('.', '../../second')"}, {"n": "2. move back", "t": 2, "c": "api.move('.', '../../main')"}]}]}, {"n": "second", "t": 0, "f": []}]}]}, {"n": "4. Rename", "t": 0, "f": [{"n": "1. Rename of entry", "t": 0, "f": [{"n": "1. make", "t": 2, "c": "api.touch('file') # 2 lines script\napi.mkdir('fold')"}, {"n": "2. rename", "t": 2, "c": "api.rename('file', 'text')# also 2 lines\napi.rename('fold', 'dir')"}, {"n": "3. delete", "t": 2, "c": "api.delete('text')\napi.delete('dir')"}]}, {"n": "2. Rename of containing folder", "t": 0, "f": [{"n": "renamable", "t": 0, "f": [{"n": "1. rename", "t": 2, "c": "api.rename('.', 'dir')"}, {"n": "2. back", "t": 2, "c": "api.rename('.', 'renamable')"}]}]}]}, {"n": "5. Help statistics", "t": 0, "f": [{"n": "1. make_statistics", "t": 2, "c": "api.touch('out.txt')\ns = api.to_py('../..')\ndat = [0, 0]\n\ndef make(d, dat):\n    if d['t'] == Type.FOLDER.ordinal():\n        dat[1] += 1\n        for el in d['f']:\n            make(el, dat)\n    else:\n        dat[0] += 1\n\n\nmake(s, dat)\n\nprint(f'files: {dat[0]}, folders: {dat[1]}')\n"}, {"n": "2. to json", "t": 2, "c": "s = api.to_json('../4. Rename')\napi.write('rename.json', s)"}, {"n": "3. from json", "t": 2, "c": "api.from_json(api.read('rename.json'))"}, {"n": "4. Delete", "t": 2, "c": "api.delete('4. Rename')\napi.delete('out.txt')\napi.delete('rename.json')"}]}, {"n": "6. Android notifications", "t": 0, "f": [{"n": "-imports", "t": 1, "c": "from androidx.core.app import NotificationManagerCompat\nfrom android.app import NotificationChannel\nfrom androidx.core.app import NotificationCompat\nfrom com.matvey.perelman.notepad2 import R\n\nmanager = getattr(NotificationManagerCompat, 'from')(api.activity)"}, {"n": "0. Instruction", "t": 1, "c": "There are few versions of android with different requirements.\n\nTry 'make notification'. If notification appeared - everything is ok. If no, we need to create notification channel, click 'create channel', and click 'make notification again'. If it appeared - ok.\n\nIf no, try: Settings -> Apps -> Notepad 2 -> Notifications -> turn on channel 'Main stream'.\nTry 'make notification' again.\nEverything needs to be ok."}, {"n": "1. create channel - 1 time", "t": 2, "c": "exec(api.read('-imports'))\n\nchannel = NotificationChannel('notepad2_notifications', 'Main stream', NotificationManagerCompat.IMPORTANCE_DEFAULT)\nchannel.setDescription('main notepad2 notifications')\n\nmanager.createNotificationChannel(channel)"}, {"n": "2. make notification", "t": 2, "c": "exec(api.read('-imports'))\n\nbuilder = NotificationCompat.Builder(api.activity, 'notepad2_notifications')\nbuilder.setSmallIcon(R.mipmap.ic_notepad)\n#R.mipmap.ic_notepad - \u0438\u043a\u043e\u043d\u043a\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\nbuilder.setContentTitle('The notification')\nbuilder.setContentText('Notification from script')\nbuilder.setPriority(NotificationCompat.PRIORITY_HIGH)\n\nmanager.notify(403470445, builder.build())\n#the number  - imaged by me id of the notification\n#used in canceling of the notification\napi.toast('Done')\n"}, {"n": "3. cancel notification", "t": 2, "c": "exec(api.read('-imports'))\nmanager.cancel(403470445)#id of notification"}, {"n": "4. delete channel", "t": 2, "c": "exec(api.read('-imports'))\nmanager.deleteNotificationChannel('notepad2_notifications')"}]}]}]}