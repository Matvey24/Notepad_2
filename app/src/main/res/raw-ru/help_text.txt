{"n": "Help-ru", "t": 0, "f": [{"n": "1. Основы", "t": 1, "c": "Папка, Текст, Скрипт - типы элементов\n\n\nПапка - содержит другие элементы\n\nТекст - текстовый файл, можно увидеть начало текста под именем файла.\nНажмите на него, чтобы редактировать.\n\nСкрипт - то же, что и текст, но клик по нему исполнит скрипт, написанный в файле.\n\nфайлы - текст или скрипт.\n\nЧтобы создать элемент, кликните '⊕', выберете тип, напишите имя, нажмите 'ОК'.\nили нажмите 'вставить', если до этого какой-то элемент был вырезан.\n\nУдерживайте '⊕', чтобы начать редактировать новый текст.\n\nНажмите кнопку 'Настройки', чтобы открыть редактирующий диалог. Здесь можно переименовать элемент, изменить тип между скриптом и текстом, удалить или вырезать.\n\nДолгое нажатие на:\nтекст - запустит его как скрипт\nскрипт - откроет его в редакторе\nпапку - откроет ее настройки\n\nЕсли 'спрашивать перед удалением' в меню выделено, приложение попросит вас подтвердить. Если не выделено - элемент будет удаляться сразу.\n\nПапка 'Помощь' - если '/Помощь' не существует, создаёт её и переходит в нее. Иначе просто переходит в неё.\n\nСтраница в Google Play: https://play.google.com/store/apps/details?id=com.matvey.perelman.notepad2\n\nПроект на GitHub: https://github.com/Matvey24/Notepad_2\n\nПолитика конфиденциальности: https://github.com/Matvey24/Notepad_2/blob/master/POLICY.md"}, {"n": "2. Скрипт", "t": 1, "c": "Скрипт - python 3.8 скрипт.\nНапишите код на python 3 в Текст, измените тип этого текста на скрипт и кликните по нему.\n\nВывод.\nВывод скрипта направляется в файл 'out.txt' в той же папке. Поток ошибок направляется в 'err.txt'.\n\nБиблиотеки.\nСейчас нет внешних библиотек, только стандартная python библиотека. 'json', 'traceback' уже подключены.\n\nSPACE.\nМожно обратиться к 'space' - словарю из любого скрипта, этот словарь один для всех скриптов. Через него можно обмениваться данными между скриптами.\n\nAPI.\nАпи notepad подключено как 'api', оно предоставляет следующие методы:\n\ntoast(str, len=False) - показывает хлебушек с текстом 'str'\n\ntouch(path) - если элемент не существует, создает новый текст.\n\nread(path)->str - читает текст из файла, если файл не существует - выбрасывает исключение.\n\nwrite(path, str) - записывает строку в файл, если нужно, создает новый. Выбрасывает исключение, если путь - путь к папке.\n\nscript(path, mode=True) - меняет тип файла между текстом и скриптом, если нужно, создаёт новый файл. Выбрасывает ошибку, если путь - путь к папке.\n\nmkdir(path) - создает новую папку, выбрасывает исключение, если путь - путь к файлу.\n\ndelete(path)->bool - удаляет элемент и если элемент - папка, то и все дочерние элементы. Возвращает True если что-то было удалено.\n\npath(path='.')->str - возвращает абсолютный путь видимой скриптом папки или указанного элемента.\n\nscript_path()->str - возвращает абсолютный путь текущего скрипта.\n\nscript_name()->str - возвращает имя текущего скрипта.\n\ncd(path) - устанавливает видимую скриптом папку на path.\n\nview(path) - устанавливает видимую на экране папку на path\n\nview_path()->str - возвращает абсолютный путь видимой на экране папки.\n\nget_name(path)->str - возвращает имя элемента, на который указывает путь.\n\nrename(path, new_name) - переименовывает элемент. \n\npath_concat(str, str)->str - возвращает правильное соединение двух путей.\n\nexists(path)->bool - возвращает True, если элемент по пути существует, иначе False.\n\nis_folder(path)->bool - возвращает True, если путь указывает на папку, иначе False.\n\nis_file(path)->bool - вощвращает True, если путь указывает на скрипт или текст, иначе False.\n\nget_type(path)->Type - возвращает экземпляр Enum, может быть None, Type.TEXT, Type.FOLDER, Type.SCRIPT.\n\nlist_files(path)->list[dict] - возвращает список файлов и папок, лежащих в папке по пути. Элементы имеют следующие поля:\nname:str,\ntype:Type,\ncontent:str - preview - первые 64 символа контента.\n\nmove(path1, path2) - перемещает элемент, называемый path1, в папку, называемую path2.\n\nim_port(path)->ModuleType - запускает файл по указанному пути, аналог обычного import.\n\nrun(path) - запускает скрипт в параллельном потоке.\n\nto_py(path)->dict - возвращает словарь следующих значений:\n'n' - имя элемента\n't' - (int) тип\nесли тип = 0 = Type.FOLDER.ordinal():\n    'f' - список словарей - элементы\nиначе:\n    'c' - весь контент файла\n\nfrom_py(dict, path='.') - создает элемент из словаря в папке, называемой 'path'.\n\nto_json(path)->str - создет строку из to_py(path)\n\nfrom_json(str, path='.') - вызывает from_py(dict, path)\n\nadd_button(name, path) - добавляет в меню (где \"папка 'Помощь'\") кнопку, которая запускает указанный скрипт.\n\nremove_button(name)->bool - удаляет из меню кнопку по имени.\n\n\nPATH.\nабсолютный путь начинается с корня, называемого '/' - как в заголовке окна.\n\nотносительный путь - это путь, начинающийся в папке, которую видит скрипт. При запуске скрипта это папка, которая содержит исполняемый файл.\n\n\nФайл '/settings/onStart' - этот файл исполняется всякий раз, когда приложение запускается. Если вы в приложении, то этот файл уже был исполнен 1 раз.\nХорошая идея для задания переменных окружения (space) или добавления кнопок.\n\n\nКаждый класс из стандартной библиотеки android может быть подключен и использован. Чтобы получить экземпляр activity, используйте 'api.activity' оно имеет тип MainActivity extends androidx.appcompat.app.AppCompatActivity. Больше информации о взаимоотношении python и android читайте: https://chaquo.com/chaquopy/doc/current/python.html\n\nЕсли вам нужно исполнить что-либо перед запуском приложения, напишите код в файле '/settings/onCreate', и исполните следующую строку:\napi.activity.onCreateEnabled(True). Приложению нужно будет инициализировать python в главном потоке, а не в бэкграунде."}, {"n": "3. Примеры кода", "t": 0, "f": [{"n": "1. Hello world", "t": 0, "f": [{"n": "1. print", "t": 2, "c": "print('Hello world')"}, {"n": "2. toast", "t": 2, "c": "api.toast('Hello world')"}, {"n": "3. input", "t": 2, "c": "print(input())"}]}, {"n": "2. Read-write", "t": 0, "f": [{"n": "1. Пример read-write", "t": 0, "f": [{"n": "1. Write", "t": 2, "c": "api.write('data/text', 'Hello world')"}, {"n": "2. Read", "t": 2, "c": "api.toast(api.read('data/text'))"}, {"n": "3. Delete", "t": 2, "c": "api.delete('data')"}]}, {"n": "2. Прибавлятель", "t": 0, "f": [{"n": ".num", "t": 1, "c": "0"}, {"n": "appender", "t": 2, "c": "#прибавить 1 к файлу num\n\nfile = '.num'\n\ni = 1\nif api.exists(file):\n    s = api.read(file)\n    i = int(s) + 1\n\napi.write(file, str(i))"}, {"n": "subtractor", "t": 2, "c": "#вычесть 1 из файла num\n\nfile = '.num'\n\ni = -1\nif api.exists(file):\n    s = api.read(file)\n    i = int(s) - 1\n\napi.write(file, str(i))"}]}, {"n": "3. Секундомер", "t": 0, "f": [{"n": "1. Переключить секундомер", "t": 2, "c": "#считает секунды, пока не переключите\nimport time\nif 'watch' in space and not space['watch']:\n    space['watch'] = True\nelse:\n    space['watch'] = False\n    tm = time.time()\n    while not space['watch']:\n        api.write('time', str(round(time.time() - tm, 2)))\n        time.sleep(0.33)\n    \n    api.delete('time')"}, {"n": "2. Переключить таймер", "t": 2, "c": "#Таймер:5\nimport time\nif 'timer' in space and not space['timer']:\n    space['timer'] = True\nelse:\n    text = api.read(api.script_name()).split('\\n', 2)\n    text = text[0].split(':')\n    delay = float(text[1])\n    space['timer'] = False\n    tm = time.time()\n    tmp = delay\n    while not space['timer'] and tmp > 0:\n        api.write('time', str(round(tmp, 2)))\n        time.sleep(0.33)\n        tmp = delay - (time.time() - tm)\n    if not space['timer']:\n        api.toast('Закончилось')\n    space['timer'] = True\n    api.delete('time')"}]}]}, {"n": "3. Move", "t": 0, "f": [{"n": "1. Пример использования", "t": 0, "f": [{"n": "1. Make data", "t": 2, "c": "api.mkdir('main')\napi.mkdir('fold')\napi.touch('file')"}, {"n": "2. Move file", "t": 2, "c": "api.move('file', 'fold')"}, {"n": "3. Move fold", "t": 2, "c": "api.move('fold', 'main')"}, {"n": "4. Move back", "t": 2, "c": "api.move('main/fold/file', '.')\napi.move('main/fold', '.')"}, {"n": "5. Clear data", "t": 2, "c": "api.delete('main')\napi.delete('fold')\napi.delete('file')"}]}, {"n": "3. Move содержащей папки", "t": 0, "f": [{"n": "main", "t": 0, "f": [{"n": "Папка со скриптом", "t": 0, "f": [{"n": "1. move to second", "t": 2, "c": "api.move('.', '../../second')"}, {"n": "2. move back", "t": 2, "c": "api.move('.', '../../main')"}]}]}, {"n": "second", "t": 0, "f": []}]}]}, {"n": "4. Rename", "t": 0, "f": [{"n": "1. rename элемента", "t": 0, "f": [{"n": "1. make", "t": 2, "c": "api.touch('file')\napi.mkdir('fold')"}, {"n": "2. rename", "t": 2, "c": "api.rename('file', 'text')\napi.rename('fold', 'dir')"}, {"n": "3. delete", "t": 2, "c": "api.delete('text')\napi.delete('dir')"}]}, {"n": "2. rename содержащей папки", "t": 0, "f": [{"n": "renamable", "t": 0, "f": [{"n": "1. rename", "t": 2, "c": "api.rename('.', 'dir')"}, {"n": "2. back", "t": 2, "c": "api.rename('.', 'renamable')"}]}]}]}, {"n": "5. Операции с папками", "t": 0, "f": [{"n": "1. статистика файлов", "t": 2, "c": "api.touch('out.txt')\ns = api.to_py('../..')\ndat = [0, 0]\n\ndef make(d, dat):\n    if d['t'] == Type.FOLDER.value:\n        dat[1] += 1\n        for el in d['f']:\n            make(el, dat)\n    else:\n        dat[0] += 1\n\n\nmake(s, dat)\n\nprint(f'files: {dat[0]}, folders: {dat[1]}')\n"}, {"n": "2. to json", "t": 2, "c": "s = api.to_json('../4. Rename')\napi.write('rename.json', s)"}, {"n": "3. from json", "t": 2, "c": "api.from_json(api.read('rename.json'))"}, {"n": "4. Delete", "t": 2, "c": "api.delete('4. Rename')\napi.delete('out.txt')\napi.delete('rename.json')"}]}, {"n": "6. Кнопки", "t": 0, "f": [{"n": "1. добавить кнопки", "t": 2, "c": "api.add_button('Копировать', '2. скрипт копирования')\napi.add_button('Вставить', '3. скрипт вставки')\napi.toast('Кнопки добавлены')"}, {"n": "2. скрипт копирования", "t": 1, "c": "#копирует json папки в буфер обмена\nfrom android.content import ClipData, ClipboardManager\n\ntext = api.to_json(api.view_path())\nmanager = api.activity.getSystemService(api.activity.CLIPBOARD_SERVICE)\n\ndata = ClipData.newPlainText('text', text)\nmanager.setPrimaryClip(data)\napi.toast('Скопировано')"}, {"n": "3. скрипт вставки", "t": 1, "c": "#создает новую папку из буфера обмена\nfrom android.content import ClipData, ClipboardManager\n\nmanager = api.activity.getSystemService(api.activity.CLIPBOARD_SERVICE)\n\ndata = manager.getPrimaryClip()\nitem = data.getItemAt(0)\n\ntext = str(item.getText())\napi.from_json(text, api.view_path())\napi.toast('Вставлено')"}, {"n": "4. удалить кнопки", "t": 2, "c": "api.remove_button('Копировать')\nif api.remove_button('Вставить'):\n    api.toast('Кнопки удалены')\nelse:\n    api.toast('Удаление не удалось')"}, {"n": "5. добавить в автозапуск", "t": 2, "c": "f = '/settings/onStart'\npath = api.path_concat(api.path(), '1. добавить кнопки')\ntext = f\"api.im_port({path!r})\"\n\nif api.exists(f):\n    api.write(f, '\\n'.join([api.read(f), text]))\nelse:\n    api.write(f, text)\napi.toast('добавлен 1 набор кнопок')"}]}, {"n": "7. Другое", "t": 0, "f": [{"n": "1. Сторонние приложения", "t": 0, "f": [{"n": "1. Настройки", "t": 2, "c": "from android.content import Intent\nfrom android.provider import Settings\nfrom android.net import Uri\n\nintent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS, Uri.parse(f'package:{api.activity.getPackageName()}'))\n\napi.activity.startActivity(intent)"}, {"n": "2. Страница в Google Play", "t": 2, "c": "from android.content import Intent\nfrom android.net import Uri\n\nintent = Intent(Intent.ACTION_VIEW, Uri.parse(f'market://details?id={api.activity.getPackageName()}'))\n\napi.activity.startActivity(intent)"}, {"n": "3. Камера", "t": 2, "c": "from android.content import Intent\nfrom android.provider import MediaStore\n\nintent = Intent(MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA)\n\napi.activity.startActivity(intent)"}, {"n": "4. Браузер", "t": 2, "c": "from android.content import Intent\nfrom android.net import Uri\nfrom java.net import URLEncoder\n\ntext = input('Поисковый запрос')\nif not len(text):\n    api.toast('Запрос отменен')\nelse:\n    host = 'https://www.google.com/search?q='\n    url = host + URLEncoder.encode(text, 'UTF-8')\n    intent = Intent(Intent.ACTION_VIEW)\n    intent.setData(Uri.parse(url))\n\n    api.activity.startActivity(intent)\n"}]}, {"n": "2. Уведомления", "t": 0, "f": [{"n": "-imports", "t": 1, "c": "from androidx.core.app import NotificationManagerCompat\nfrom android.app import NotificationChannel\nfrom androidx.core.app import NotificationCompat\nfrom com.matvey.perelman.notepad2 import R\n\nmanager = getattr(NotificationManagerCompat, 'from')(api.activity)"}, {"n": "0. Инструкция", "t": 1, "c": "Есть несколько версий android с разными требованиями.\n\nпопробуйте 'создать уведомление'. Если уведомление появилось - все хорошо.\nЕсли нет, то нужно создать канал уведомлений\nкликните создать канал, попробуйте снова 'создать уведомление'.\nЕсли появилось - все хорошо.\n\nЕсли нет, то попробуйте: Настройки из папки Сторонние приложения -> Уведомления -> включите канал 'Main stream'. Попробуйте снова 'Создать уведомление'.\nТеперь все должно быть хорошо."}, {"n": "1. создать канал - 1 раз", "t": 2, "c": "im = api.im_port('-imports')\n\nchannel = im.NotificationChannel('notepad2_notifications', 'Main stream', im.NotificationManagerCompat.IMPORTANCE_HIGH)\nchannel.setDescription('main notepad2 notifications')\n\nim.manager.createNotificationChannel(channel)"}, {"n": "2. создать уведомление", "t": 2, "c": "im = api.im_port('-imports')\n\nbuilder = im.NotificationCompat.Builder(api.activity, 'notepad2_notifications')\nbuilder.setSmallIcon(im.R.mipmap.ic_notepad)\n#R.mipmap.ic_notepad - иконка приложения\nbuilder.setContentTitle('The notification')\nbuilder.setContentText('Notification from script')\nbuilder.setPriority(im.NotificationCompat.PRIORITY_HIGH)\n\nim.manager.notify(9548, builder.build())\n#число - придуманное мной id уведомления\n#пригодится для удаления\napi.toast('Done')\n"}, {"n": "3. отменить уведомление", "t": 2, "c": "im = api.im_port('-imports')\nim.manager.cancel(9548)#id уведомления"}, {"n": "4. удалить канал", "t": 2, "c": "exec(api.read('-imports'))#ещё способ сделать import\nmanager.deleteNotificationChannel('notepad2_notifications')"}]}, {"n": "3. Не выключать экран", "t": 2, "c": "#запустите, и экран сам не выключится\nfrom java.lang import Runnable\nfrom java import dynamic_proxy\nclass Run(dynamic_proxy(Runnable)):\n    def run(self):\n        api.activity.getWindow().addFlags(128)\n\napi.activity.runOnUiThread(Run())\napi.toast('Готово')"}]}]}]}